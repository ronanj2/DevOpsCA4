name: CI/CD Pipeline ✈️

on:
  push:
    branches:
      - 'main'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true    
jobs:

  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 6
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add Nuget Feed
      run:  dotnet nuget add source ${{ secrets.GITHUBNUGETURL }} -n github -u ${{ secrets.GITHUBUSER }} -p ${{ secrets.GITHUBREADPACKAGES }} --store-password-in-clear-text    
      shell: pwsh
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
      env:
        ASPNETCORE_ENVIRONMENT: Development

  super-linter:
    name: Lint Code Base
    if: ${{ !startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        # Full git history is needed to get a proper list of changed files within `super-linter`
        fetch-depth: 0
    - name: Lint Code Base
      id: lintcodebase
      uses: github/super-linter@v4
      continue-on-error: true  # Informational, continue with pipeline if superlinter fails. 
      env:
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_JSCPD: false
        VALIDATE_GITHUB_ACTIONS: false
        # Change to 'master' if your main branch differs
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-analysis:
    name: Code Analysis
    needs: [build-and-test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add Nuget Feed
      run: |
        dotnet nuget add source ${{ secrets.GITHUBNUGETURL }} -n github -u ${{ secrets.GITHUBUSER }} -p ${{ secrets.GITHUBREADPACKAGES }} --store-password-in-clear-text    
      shell: pwsh 
    - name: Sonarqube Begin
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"TheWorkBookDev_TheWorkBook.Backend" /o:"theworkbookdev" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
    - name: Build
      run: dotnet build
    - name: Test with the dotnet CLI
      run: dotnet test
      env:
        ASPNETCORE_ENVIRONMENT: Development
    - name: Sonarqube end
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security:
    name: Security
    needs: [build-and-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  prepare-release:
    name: Prepare Release (get version from tag)
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [code-analysis, security]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - id: GetBuildVersion
      run: |
        $ref = "${env:GITHUB_REF}"
        $version = $ref.Substring($ref.LastIndexOf("/") + 2)
        echo "::set-output name=version::${version}"
      shell: pwsh

    - name: Create changelog text
      id: changelog
      uses: loopwerk/tag-changelog@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        exclude_types: other,doc,chore

    - name: Create release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ steps.changelog.outputs.changes }}
        draft: false
        prerelease: false

    outputs:
      version: ${{ steps.GetBuildVersion.outputs.version }}

  publish:
    name: Create deploy package
    needs: [prepare-release]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add Nuget Feed
      run:  dotnet nuget add source ${{ secrets.GITHUBNUGETURL }} -n github -u ${{ secrets.GITHUBUSER }} -p ${{ secrets.GITHUBREADPACKAGES }} --store-password-in-clear-text
    - name: Set version in CloudFormation
      working-directory: ./src/TheWorkBook.Backend.API
      run: find *.template -type f -exec sed -i ''s/#{ReleaseVersion}#/v${{needs.prepare-release.outputs.version}}/g'' {} \;
    - name: Set version in aws-lambda-tools-defaults
      working-directory: ./src/TheWorkBook.Backend.API
      run: find aws-lambda-tools-defaults.json -type f -exec sed -i ''s/#{ReleaseVersion}#/${{needs.prepare-release.outputs.version}}/g'' {} \;
    - name: Create Output Directories
      run: |
        cd "${env:GITHUB_WORKSPACE}"
        mkdir -p output/published
        mkdir -p output/artifact
      shell: pwsh
    - name: Install dependencies
      run: dotnet restore      
    - name: Publish
      run: |
        dotnet build --configuration Release --no-restore
        dotnet publish Publish.slnf --output ${env:GITHUB_WORKSPACE}/output/published `
          -p:Version=${{needs.prepare-release.outputs.version}} `
          --configuration Release --framework "net6.0" --runtime linux-arm64 --self-contained false `
          -p:GenerateRuntimeConfigurationFiles=true -p:PublishReadyToRun=true `
          -p:TieredCompilation=false -p:TieredCompilationQuickJit=false      
      shell: pwsh          
    - name: Zip up files
      run:  |
        Compress-Archive -Path "${env:GITHUB_WORKSPACE}/output/published/*" -CompressionLevel Optimal `
          -DestinationPath "${env:GITHUB_WORKSPACE}/output/artifact/LambdaDeploy.zip"
      shell: pwsh
    - name: Copy CloudFormation template into package
      run:  |
        Copy-Item -Path "${env:GITHUB_WORKSPACE}/src/*/serverless.template" `
          -Destination "${env:GITHUB_WORKSPACE}/output/artifact/serverless.template"
      shell: pwsh
    - name: Copy aws-lambda-tools-defaults into package
      run:  |
        Copy-Item -Path "${env:GITHUB_WORKSPACE}/src/*/aws-lambda-tools-defaults.json" `
          -Destination "${env:GITHUB_WORKSPACE}/output/artifact/aws-lambda-tools-defaults.json"
      shell: pwsh      
    - uses: actions/upload-artifact@v3
      with:
        name: backend-package
        path: ${{ github.workspace }}/output/artifact/**/*
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
        retention-days: 3 # Set low because I want to stay inside the limits of the free tier.

  